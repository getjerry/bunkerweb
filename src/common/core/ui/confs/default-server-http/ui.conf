{% if UI_HOST != "" and not has_variable(all, "USE_UI", "yes") +%}
access_by_lua_block {
    local ngx_var = ngx.var
    local scheme = ngx_var.scheme
    local http_host = ngx_var.http_host
    local request_uri = ngx_var.request_uri
    if scheme == "http" and http_host ~= nil and http_host ~= "" and request_uri and request_uri ~= "" then
        return ngx.redirect("https://" .. http_host .. request_uri, ngx.HTTP_MOVED_PERMANENTLY)
    end
}
location /setup {
    etag off;
    add_header Last-Modified "";
    set $backendui "{{ UI_HOST }}";
    proxy_pass $backendui;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_set_header X-Forwarded-Host $http_host;
    proxy_set_header X-Forwarded-Prefix "/";
    proxy_http_version 1.1;
	proxy_set_header Upgrade $http_upgrade;
	proxy_set_header Connection $connection_upgrade;
    proxy_buffering on;
    proxy_connect_timeout 60s;
	proxy_read_timeout 60s;
	proxy_send_timeout 60s;
}

location /setup/check {
    etag off;
    add_header Last-Modified "";
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    default_type 'text/plain; charset=utf-8';
    content_by_lua_block {
        -- Remove server header
        ngx.header["Server"] = nil

        local logger = require "bunkerweb.logger":new("UI")
        local args, err = ngx.req.get_uri_args(1)
        if err == "truncated" or not args["server_name"] or args["server_name"] == "" then
            logger:log(ngx.NOTICE, "Received standard server name check")
            ngx.print("ok")
        else
            logger:log(ngx.NOTICE, "Received remote server name check for " .. args["server_name"])
            local http = require "resty.http".new()
            local res, err = http:request_uri("https://" .. args["server_name"] .. "/setup/check", {ssl_verify = false})
            if not res then
                ngx.print("ko")
                logger:log(ngx.ERR, "Server name check failed : " .. err)
                return
            end
            if res.status == 200 and res.body == "ok" then
                ngx.print("ok")
                return
            end
            logger:log(ngx.ERR, "Server name check failed : status = " .. tostring(res.status) .. " and body != ok")
            ngx.print("ko")
        end
    }
}

{% endif +%}
